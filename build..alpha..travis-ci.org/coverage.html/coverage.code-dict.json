{"/home/travis/build/npmtest/node-npmtest-docker-pig/test.js":"/* istanbul instrument in package npmtest_docker_pig */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-docker-pig/lib.npmtest_docker_pig.js":"/* istanbul instrument in package npmtest_docker_pig */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_docker_pig = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_docker_pig = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-docker-pig/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-docker-pig && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_docker_pig */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_docker_pig\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_docker_pig.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_docker_pig.rollup.js'] =\n            local.assetsDict['/assets.npmtest_docker_pig.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_docker_pig.__dirname + '/lib.npmtest_docker_pig.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-docker-pig/node_modules/docker-pig/bin/pig":"#!/usr/bin/env node\nvar cli = require('../lib/cli')\ncli.main()\n","/home/travis/build/npmtest/node-npmtest-docker-pig/node_modules/docker-pig/lib/cli.js":"var errors = require('./errors'),\n        fs = require('fs'),\n         _ = require('lodash')\n\nvar usage = \"Usage: pig COMMAND NAME [& args]\\n\\n\" +\n            \"Commands:\\n\" +\n            \"  start   Start container\\n\" +\n            \"  stop    Stop container\\n\" +\n            \"  rm      Remove container\\n\" +\n            \"  logs    Show docker logs output for container (use -f for follow, -t for tail)\\n\" +\n            \"  inspect Show docker inspect output for container\\n\" +\n            \"  up      Start all daemons from pig.json\\n\" +\n            \"  down    Stop all daemons in pig.json\\n\" +\n            \"  bash    Attach /bin/bash to container (for debug)\\n\"\n\nfunction parseArgs(args) {\n    var command     = args[0]\n    var recreate    = _.contains(['--no-recreate', '-R'], args[1]) == false\n    var name        = recreate ? args[1] : args[2]\n    var remainder   = args.slice(recreate ? 2 : 3)\n    var interactive = !(process.env[\"NONINTERACTIVE\"] === 'true')\n    var verbose     = process.env[\"VERBOSE\"] === 'true'\n\n    return {\n        command: command,\n        name: name,\n        remainder: remainder,\n        options: { interactive: interactive, verbose: verbose, recreate: recreate },\n    }\n}\n\nfunction getContainer(config, args) {\n    if (!args.name) {\n        throw new errors.PigError('No container name given\\n' + usage)\n    }\n\n    var container = config[args.name]\n    if (container) {\n        return container\n    } else {\n        throw new errors.PigError(\"Container '\" + args.name + \"' not found\")\n    }\n}\n\nfunction handleError(err) {\n    if (err instanceof errors.ConfigError) {\n        process.stderr.write('error in configuration: ' + err.message + '\\n')\n        process.exit(1)\n    } else if (err instanceof errors.PigError) {\n        process.stderr.write('error: ' + err.message + '\\n')\n        process.exit(1)\n    } else if (err) {\n        throw err\n    }\n}\n\nfunction loadConfiguration(){\n  if (fs.existsSync('pig.json') && fs.existsSync('pig.yml')) {\n    throw new errors.ConfigError(\"Can't decide configuration file to load. Both pig.json and pig.yml present. Please remove either one.\");\n  } else if (fs.existsSync('pig.json')) {\n    return require('./config').fromFile('pig.json')\n  } else if (fs.existsSync('pig.yml')) {\n    return require('./config').fromFile('pig.yml')\n  } else {\n    throw new errors.ConfigError('Could not find pig.json or pig.yml from current working directory.')\n  }\n}\n\n\nfunction main(args, callback) {\n    var config = loadConfiguration()\n    var commands = require('./commands')(config, args.options)\n\n    switch (args.command) {\n        case \"start\":\n            commands.start(getContainer(config, args), args.remainder, { recreate: args.options.recreate }, callback)\n            break\n\n        case \"stop\":\n            commands.stop(getContainer(config, args), callback)\n            break\n\n      case \"rm\":\n            commands.remove(getContainer(config, args), callback)\n            break\n\n        case \"bash\":\n            commands.bash(getContainer(config, args), callback)\n            break\n\n        case \"up\":\n            commands.startDaemons({ recreate: args.options.recreate }, callback)\n            break\n\n        case \"down\":\n            commands.stopDaemons(callback)\n            break\n\n        case \"logs\":\n        case \"inspect\":\n            commands.docker(args.command, args.remainder.concat([getContainer(config, args).name]), callback)\n            break\n\n        case undefined:\n            callback(new errors.PigError('No command specified\\n' + usage))\n            break\n\n        default:\n            callback(new errors.PigError('Unknown command \\'' + args.command + '\\'\\n' + usage))\n            break\n    }\n}\n\nmodule.exports.main = function() {\n    try {\n        var cmdArgs = parseArgs(process.argv.slice(2))\n        main(cmdArgs, handleError)\n    } catch (err) {\n        handleError(err)\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-docker-pig/node_modules/docker-pig/lib/errors.js":"var util = require('util')\n\nfunction ConfigError(message) {\n    Error.call(this)\n    Error.captureStackTrace(this, this.constructor)\n\n    this.name = this.constructor.name\n    this.message = message\n}\n\nutil.inherits(ConfigError, Error)\n\nfunction PigError(message) {\n    Error.call(this)\n    Error.captureStackTrace(this, this.constructor)\n\n    this.name = this.constructor.name\n    this.message = message\n}\n\nutil.inherits(PigError, Error)\n\nmodule.exports = {\n    ConfigError: ConfigError,\n    PigError: PigError\n}\n","/home/travis/build/npmtest/node-npmtest-docker-pig/node_modules/docker-pig/lib/commands.js":"var spawn = require('child_process').spawn,\n  helpers = require('./helpers'),\n   errors = require('./errors'),\n        _ = require('lodash')\n\nmodule.exports = function(containers, options) {\n    var logger = require('./logger')(options)\n    var stop = require('./commands/stop')(logger)\n    var start = require('./commands/start')(containers, options, logger)\n\n    function bash(container) {\n        spawn('docker', [\n            'exec',\n            '-it',\n            container.name,\n            '/bin/bash'\n        ], { stdio: 'inherit' })\n    }\n\n    function startContainer(container, commandArgs, startOptions, done) {\n        start(container, commandArgs, startOptions, done)\n    }\n\n    function stopContainer(container, done) {\n        stop(container, {removeStopped: false}, done)\n    }\n\n    function removeContainer(container, done) {\n        stop(container, {removeStopped: true}, done)\n    }\n\n    function startDaemons(startOptions, done) {\n        done = done || _.noop\n\n        var daemons = _.filter(containers, { daemon: true })\n        helpers.asyncIterate(daemons, function(container, next) {\n            start(container, [], startOptions, next)\n        }, done)\n    }\n\n    function stopDaemons(done) {\n        done = done || _.noop\n\n        var daemons = _.filter(containers, { daemon: true })\n        helpers.asyncIterate(daemons, function(container, next) {\n            stop(container, null, next)\n        }, done)\n    }\n\n    function docker(command, args, callback) {\n        var child = spawn('docker', [command].concat(args), { stdio: 'inherit' })\n        child.on('exit', function(code) {\n            if (code === 0) {\n                callback()\n            } else {\n                callback(new errors.PigError('Running docker ' + command + ' ' + args.join(' ') + ' failed with exit code ' + code + ' != 0'))\n            }\n        })\n    }\n\n    return {\n        start: startContainer,\n        stop: stopContainer,\n        remove: removeContainer,\n        bash: bash,\n        startDaemons: startDaemons,\n        stopDaemons: stopDaemons,\n        docker: docker\n    }\n}\n\n","/home/travis/build/npmtest/node-npmtest-docker-pig/node_modules/docker-pig/lib/helpers.js":"var exec = require('child_process').exec,\n       _ = require('lodash')\n\n\nmodule.exports.asyncIterate = function(array, callback, done) {\n    function iterate(idx) {\n        var current = array[idx]\n\n        if (current) {\n            callback(current, function() { iterate(idx+1) }, function(err) { done(err) })\n        } else {\n            done()\n        }\n    }\n\n    iterate(0)\n}\n\nmodule.exports.checkRunning = function(container, callback) {\n    exec('docker inspect ' + container.name, function(err, stdout) {\n        if (err) {\n            callback(false)\n        } else {\n            var info = _.head(JSON.parse(stdout))\n            var isRunning = info && info.State ? !!info.State.Running : false\n            callback(isRunning)\n        }\n    })\n}\n\nmodule.exports.checkCreated = function(container, callback) {\n    exec('docker inspect ' + container.name, function(err) {\n        var isCreated = err ? false : true\n        callback(isCreated)\n    })\n}\n","/home/travis/build/npmtest/node-npmtest-docker-pig/node_modules/docker-pig/lib/config.js":"var fs = require('fs'),\nerrors = require('./errors'),\n     _ = require('lodash'),\n  path = require('path'),\n  yaml = require('js-yaml')\n\nmodule.exports.fromFile = function(file) {\n    var config = null\n\n    if (path.extname(file) === '.json') {\n      config = fromJsonFile(file);\n    } else if (path.extname(file) === '.yml') {\n      config = fromYamlFile(file);\n    } else {\n      throw new errors.ConfigError('Unknown file format: ' + file)\n    }\n\n    return resolveIncludes(config)\n}\n\nfunction fromJsonFile(file){\n  try {\n      return JSON.parse(fs.readFileSync(file))\n  } catch (err) {\n      throw new errors.ConfigError('Invalid JSON:\\n' + err.stack)\n  }\n}\n\nfunction fromYamlFile(file){\n  try {\n      return yaml.safeLoad(fs.readFileSync(file))\n  } catch (err) {\n      throw new errors.ConfigError('Invalid Yaml:\\n' + err.stack)\n  }\n}\n\n\nfunction createPrefixer(prefix) {\n    return function(name) {\n        return prefix + \"/\" + name\n    }\n}\n\nfunction resolveIncludes(config) {\n    var includes = config.include\n    delete config.include\n\n    _.forOwn(includes, function(prefix, jsonPath) {\n        var includedConfig = exports.fromFile(jsonPath)\n\n        _.forOwn(includedConfig, function(container, name) {\n            var addPrefix = createPrefixer(prefix)\n\n            container.pigdir = path.resolve(path.dirname(jsonPath))\n\n            if (container.links) {\n                container.links = container.links.map(addPrefix)\n            }\n\n            if (container.volumesFrom) {\n                container.volumesFrom = container.volumesFrom.map(addPrefix)\n            }\n\n            config[addPrefix(name)] = container\n        })\n    })\n\n    return config\n}\n","/home/travis/build/npmtest/node-npmtest-docker-pig/node_modules/docker-pig/lib/logger.js":"module.exports = function(options) {\n    return {\n        info: function(msg) {\n            if (options.verbose) {\n                console.log(msg)\n            }\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-docker-pig/node_modules/docker-pig/lib/commands/start.js":"var  fs = require('fs'),\n   exec = require('child_process').exec,\n  spawn = require('child_process').spawn,\nhelpers = require('../helpers'),\n errors = require('../errors'),\n   path = require('path'),\n      _ = require('lodash')\n\n\nmodule.exports = function(containers, options, logger) {\n    var build = require('./build')(logger)\n    var stop = require('./stop')(logger)\n\n    function start(container, commandArgs, startOptions, done) {\n        if (container.startAll) {\n            return helpers.asyncIterate(container.startAll, function(name, next, fail) {\n                var container = containers[name]\n                container.daemon = true\n\n                start(container, [], startOptions, function(err) {\n                    if (err) {\n                        fail(err)\n                    } else {\n                        next()\n                    }\n                })\n            }, done)\n        }\n\n        var originalWorkingDirectory = process.cwd()\n\n        container = _.defaults(container, {\n            daemon: false,\n            pigdir: originalWorkingDirectory,\n            environment: {},\n            volumes: {},\n            volumesFrom: [],\n            links: [],\n            externalLinks: [],\n            ports: []\n        })\n\n        process.chdir(container.pigdir)\n\n        done = done || _.noop\n\n        helpers.checkCreated(container, function(isCreated) {\n            if (isCreated && startOptions.recreate) {\n                stop(container, {removeStopped: true}, createAndStartContainer)\n            } else if (!isCreated) {\n                createAndStartContainer()\n            } else {\n                startContainer()\n            }\n        })\n\n        function createAndStartContainer() {\n            withHooks(container, function(done) {\n                build(container, function(err) {\n                    if (err) return done(err)\n\n                    startDeps(container, function(err) {\n                        if (err) {\n                            done(err)\n                        } else {\n                            dockerRun(done)\n                        }\n                    })\n                })\n            }, function(err) {\n                process.chdir(originalWorkingDirectory)\n                done(err)\n            })\n        }\n\n        function startContainer() {\n            withHooks(container, function(done) {\n                startDeps(container, function(err) {\n                    if (err) {\n                        done(err)\n                    } else {\n                        helpers.checkRunning(container, function(isRunning) {\n                            if (isRunning) {\n                                done()\n                            } else {\n                                dockerStart(done)\n                            }\n                        })\n                    }\n                })\n            }, function(err) {\n                process.chdir(originalWorkingDirectory)\n                done(err)\n            })\n        }\n\n        function dockerStart(callback) {\n            var args = ['start', container.name]\n            execDockerCmd(container, args, \"Starting\", callback)\n        }\n\n        function dockerRun(callback) {\n            var args = ['run'].concat(runOptions(container, commandArgs))\n            execDockerCmd(container, args, \"Running\", callback)\n        }\n\n        function execDockerCmd(container, args, action, callback) {\n            logger.info(action + \" \" + container.name + \", command line: docker \" + args.join(' '))\n\n            spawn('docker', args, { stdio: 'inherit' }).on('close', function(code) {\n                if (code !== 0) {\n                    callback(new errors.PigError('Execution of docker ' + args.join(' ') + ' exited with return code ' + code + ' != 0'))\n                } else {\n                    callback()\n                }\n            })\n        }\n    }\n\n    function startDeps(container, done) {\n        var deps = container.links\n        deps = deps.concat(container.volumesFrom)\n\n        helpers.asyncIterate(deps, function(name, next, stop) {\n            var dependency = containers[name]\n            if (!dependency) {\n                stop(new errors.ConfigError('Could not resolve link ' + name + ' for ' + container.name))\n                return\n            }\n\n            if (!dependency.daemon) {\n                stop(new errors.ConfigError('Link ' + name + ' for ' + container.name + ' is not a daemon. Only daemons can be linked to.'))\n                return\n            }\n\n            if (dependency.name === container.name) {\n                stop(new errors.ConfigError('Container ' + container.name + ' is linking to itself.'))\n                return\n            }\n\n            start(containers[name], [], { recreate: false }, function(err) {\n                if (err) {\n                    stop(err)\n                } else {\n                    next()\n                }\n            })\n        }, done)\n    }\n\n\n    function runHook(cmdLine, done) {\n        var cmd, args\n        if (typeof cmdLine === 'string') {\n            cmd = cmdLine \n            args = []\n        } else {\n            cmd = cmdLine[0]\n            args = cmdLine.slice(1)\n        }\n\n        var hook = spawn(cmd, args, { stdio: 'inherit' })\n        hook.on('close', function(status) {\n            if (status !== 0) {\n                done(new errors.PigError('Hook ' + cmdLine + ' returned with code ' + status + ' != 0'))\n            } else {\n                done()\n            }\n        })\n    }\n\n    function withHooks(container, runFn, done) {\n        function runHookWrapper(cmdLine) {\n            if (cmdLine) {\n                return function(done) {\n                    runHook(cmdLine, done)\n                }\n            } else {\n                return function(done) {\n                    done()\n                }\n            }\n        }\n\n        var hooks = _.chain(container.hooks || {})\n                     .defaults({ before: null, after: null })\n                     .mapValues(runHookWrapper)\n                     .value()\n\n        hooks.before(function(err) {\n            if (err) return done(err)\n\n            runFn(function(err) {\n                if (err) {\n                    done(err)\n                } else {\n                    hooks.after(function(err) {\n                        done(err)\n                    })\n                }\n            })\n        })\n    }\n\n    function runOptions(container, commandArgs) {\n        var opts = []\n\n        function addOpts() {\n            var newOpts = Array.prototype.slice.call(arguments)\n            newOpts.forEach(function(opt) {\n                opts.push(opt)\n            })\n        }\n\n        addOpts('--name', container.name)\n\n        if (container.daemon) {\n            addOpts('-d')\n        }\n\n        if (options.interactive && !container.daemon) {\n            addOpts('-it')\n        }\n\n        if (container.workdir) {\n            addOpts('--workdir', container.workdir)\n        }\n\n        container.ports.forEach(function(port) {\n            addOpts('-p', port)\n        })\n\n        container.links.forEach(function(linkedName) {\n            var linkedContainer = containers[linkedName]\n            addOpts('--link', linkedContainer.name + ':' + removePrefix(linkedName))\n        })\n\n        container.externalLinks.forEach(function(link) {\n            addOpts('--link', link)\n        })\n\n        _.forOwn(container.environment, function(envValue, envName) {\n            envValue = envValue.replace(/\\$([\\w_]+)/g, function(s, m) { return process.env[m] || '' })\n            addOpts('-e', envName + '=' + envValue)\n        })\n\n        _.forOwn(container.volumes, function(containerPath, hostPath) {\n            addOpts('-v', path.resolve(hostPath) + ':' + containerPath)\n        })\n\n        if (container.hostname) {\n            addOpts('-h', container.hostname)\n        }\n\n        container.volumesFrom.forEach(function(volumeName) {\n            var volumeContainer = containers[volumeName]\n            addOpts('--volumes-from', volumeContainer.name)\n        })\n\n        return opts\n            .concat(container.image)\n            .concat(container.command || [])\n            .concat(commandArgs)\n    }\n\n    function removePrefix(name) {\n        var parts = name.split('/')\n        return parts[parts.length-1]\n    }\n\n    return start\n}\n\n","/home/travis/build/npmtest/node-npmtest-docker-pig/node_modules/docker-pig/lib/commands/stop.js":"var exec = require('child_process').exec,\n       _ = require('lodash'),\n helpers = require('../helpers')\n\nfunction rm(container, done) {\n    done = done || _.noop\n\n    exec('docker rm ' + container.name, function(err) {\n        done()\n    })\n}\n\nmodule.exports = function(logger) {\n    return function(container, opts, done) {\n        opts = _.defaults(opts || {}, {removeStopped: false})\n        done = done || _.noop\n\n        helpers.checkCreated(container, function(isCreated) {\n            if (!isCreated) {\n                done()\n            } else {\n                logger.info(\"Stopping \" + container.name)\n                exec('docker stop ' + container.name, function() {\n                    if (opts.removeStopped) {\n                        rm(container, done)\n                    } else {\n                        done()\n                    }\n                })\n            }\n        })\n    }\n}\n"}